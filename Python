Introduction: SYNTAX

print("hello, world")


from cs50 import get_string (cs50 is a python library)

answer = get_string("What's your name? ") 
print("hello, " + answer) = print(f"hello, {answer}")   f string

we run the program by typing 'python' (name of the language) and add the name of the program (for example: hello.py)
all python programs end with .py

'+' joins one string to another

counter = 0 in python we don't need to mention the type of variable we want (for example int, str, ...)
variable named counter equals 0

counter = counter + 1
counter += 1

if x < y:
    print("x is less thay y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")

4 spaces indented
else if = elif


LOOPS:

while True:
    print("hello, world")
True and False are capitalised

i = 0
while i < 3:
    print("hello, world")
    i += 1


FOR LOOP:

for i in [0, 1, 2]:
    print("hello, world")
[0, 1, 2] in python that's a list: first i = 0, then i = 1 and lastly, i = 2

for i in range(3):        
    print("hello, world")
same as above, but easier when operating with bigger numbers
range generates a list of 3 values

DATA TYPES in Python:
bool (True, False)
float (real number with decimal points)
int (numbers without decimal points)
str (strings)

range: gives you a range of values
list: array that can be resized
tuple: a way of implementing comma separated values: (x,y)
dict: (dictionaries) allow you to store keys and values
set: collection of values without duplicates

IMPORTING A LIBRARY:
import cs50
from cs50 import get_float


BLURRING AN IMAGE: blur.py
from PIL import Image, Imagefilter              # open source functions that are in a library named PIL
before = Image.open("bridge.bmp")               # 'Image.open' is a function inside a variable
after = before.fillter(ImageFilter.BoxBlur(10)) # we apply the filter that averages 10 pixels together
after.save("out.bmp")

TERMINAL: 
python blur.py
ls
the image is then blurred


dictionary.py
words = set()

def check(word):                  # checking if a given word is in dictionary
    if word.lower in words:       # .lower changes all the words to lowercase and therefore we cannot miss any
        return True
    else:
        return False

def load(directory):              # defining your own function: a function called load that takes an argument, named dictionary
    file = open(dictionary, "r")
    for line in file:             # for loop
        words.add(line.rstrip())  # adding words to each line while .rstrip removes the NULL character at the end of the line
    file.close
    return True

def size():
    return len(words)

def unload():
    return True


HELLO WORLD:
answer = input("What's your name? ")     # input: prompts an user and waits for them to type in a value
print(f"hello, {answer}")


ADDITION:
x = int(input("x: "))         # input takes strings, not integers
y = int(input("y: "))         # we can cast two strings into integers

print(x + y)

comments are typed with a hash (#) symbol


DIVISION:
x = int(input("x: "))         
y = int(input("y: "))        

print(x / y)


CONDITIONS:
from cs50 import get_int

x = int(input("x: "))         
y = int(input("y: ")) 

if x < y:
    print("x is less than y")
elif x > y:
    print("x is greater than y")
else: 
    print("x is equal to y")


AGREE:
from cs50 import get_string

s = get_string("Do you agree? ")

if s == "Y" or s == "y":           or = ||  python is more readable in English
    print("Agreed.")               no fundemental differences between " and ': as long as we are consistent
elif s == "N" or s == "n":
    print("Not agreed.")

better version:
if s.lower in ["y", "yes"]:
    print("Agreed.")               


MEOW:
def main():
    for i in range(3):
        meow()

def meow():
    print("meow")

main()
we have first defined main, then meow and lastly, we are calling the function main

another (better) version:

def main():
    meow(3)
    
def meow(n):
    for i in range(n):
        print("meow")

main()


POSITIVE:
from cs50 import get_int

def main():
    i = get_positive_int()
    print(i)
    
def get_positive_int():
    while True:   # infinite loop (do the following forever)
        n = get_int("Positive integer: ")
        if n > 0:
            break
    return n


MARIO:

for i in range(3):
    print("#")
TERMINAL: prints 3 vertical hashes

for i in range(4):
    print("?", end="")   # it ends every call with nothing (if we put dot in between "",there wpuld be a dot between question markss
print()
TERMINAL: ????

print("?" * 4)   # prints 4 question marks

for i in range(3):
    for j in range(3):
        print("#", end="")
    print()
TERMINAL:
###
###
###


I = 1
WHILE treue:
    print(i)
    i*0 1
TERMINAL: counts to infinity


SCORES:
scores = [72, 73, 33]  #list in python

print(f"Average: {(sum(scores) / len(scores))}")  # sum and len (length) functions exist in python
TERMINAL: Average: 59.3

another way:
scores = [72, 73, 33]  #list in python
average = sum(scores) / len(scores)
print(f"Average: {average}")

we don't need to statically assing the scores: instead we can ask the user for the input (3 scores) and then calculate the average:
from cs50 import get_int

scores = []
for i in range(3):
    scores.append(get_int("Score: "))
    
average = sum(scores) / len(scores)
print(f"Average: {average}")

    
UPPERCASE: program that asks the user for input and then prints the output in upper letters
from cs50 import get_string

s = get_string("Before: ")
print("After: ",end="")
print(s.upper())

another version:
s = get_string("Before: ")
print("After: ",end="")
for c in s:
    print(c.upper(), end="")
print()


ARGV:
from sys import argv

if len(argv) == 2:
    print(f"hello, {argv[1]"})
else:
    print("hello, world")
TERMINAL: 
to run the program we type: python argv.py Ema: 'argv.py' is [0] and 'Ema' is [1]
'python' is an interpreter/programs name
if we just run the program (python argv.py), it's output is 'hello, world', 
but if we also type our name besides running the program, it outputs 'hello, Ema'

for sys in argv

for arg in argv:
    print(arg)
TERMINAL: prints everything we type after programs name 'python'


EXIT: demonstrates the exist statuses
import sys               # we are importing the whole library as we are using more funtions, 
                           meaning we now have to prefix each function with sys.
if len(sys.argv) != 2:
    print("missing comman-line argument")
    sys.exit(1)
    
print(f"hello, {sys.argv[1]}")
sys.exit(0)
TERMINAL: python exit.py: returns 'missing comman-line argument'
          python exit.py Ema: returns hello, Ema
if two arguments are typed, it returns a string, otherwise the program exits


NUMBERS: linear search for number 0
import sys

numbers = [4, 6, 8, 2, 7, 5, 0]

if 0 in numbers:
    print("Found")
    sys.exit(0)
else:
    print("Not found")
    sys.exit(1)


PHONEBOOK:
from cs50 import get_string

people = {                             # a new variable that is a dictionary
    "Brian": "09876543",
    "David": "34567890"
}

name = get_string("Name:")             # getting a string from the user
if name in people: 
    number = people[name]              # searching the dictionary for name
    print(f"Number: {number}")         # returning the number associated with the name

TERMINAL: 
Name: Brian (that's what a user types)
Number: 09876543

dictionary is defined with {} at the beginning and at end
dictionaries in python are implemented using a hash table


PHONEBOOK.PY and PHONEBOOK.CSV (a spreadsheet)
import csv

from cs50 import get_string

with open("phonebook.csv", "a") as file:  # opening this file in append mode
                                            'with open' then automatically closes it after the indention ends
    name = get_string("Name: ")
    number = get_string("Number: ")

    writer = csv.writer(file)          # wrapping the file with a csv functionality

    writer.writerow([name, number])    # writing a row to this file

TERMINAL: open phonebook.csv
          python phonebook.py
          Name: Brian
          Number: 098765
          if we now open our csv file, on the first line we get: 
          name,number
          Brian,098765


SWAP:
x = 1
y = 2

print(f" x is {x}, y is {y}")
x, y = y, x                     # we are switcing variables without a temporary variable explicitly
print(f" x is {x}, y is {y}")
TERMINAL: x is 1, y is 2
          x is 2, y is 1


HOGWARDS.PY: a program that annalyses the csv file (.csv) any way we want
import csv
houses = {
    "Gryffindor": 0,
    "Hufflepuff": 0,
    "Ravenclav": 0,
    "Slytherin": 0
}

with open("file_name", "r") as file:
    reader = csv.reader(file)
    next(reader)                     # skips the first row
    for row in reader:
        house = row[1]
        houses[house] += 1

for house in houses:
    print(f"{house}: {houses[house]}")

TERMINAL: Gryffindor: 120
          Hufflepuff: 40
          Ravenclav: 71
          Slytherin: 43





















   
